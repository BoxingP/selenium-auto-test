---
- name: get play directory
  set_fact:
    play_path: '{{ hostvars["localhost"]["code"]["local_path"] }}'

- name: import users' credentials
  copy:
    src: 'vars/selenium_auto_test_users.json'
    dest: '{{ play_path }}/lambda/test_website/utils/users.json'
    force: yes
  become: yes

- name: fetch files from remote
  fetch:
    src: '{{ play_path }}/{{ item.path }}'
    dest: '/tmp/{{ item.file }}'
    flat: yes
    fail_on_missing: yes
  loop:
    - { file: 'config.yaml', path: 'config.yaml' }
    - { file: 'test_website_config.json.j2', path: 'lambda/test_website/config.json.j2' }
    - { file: 'generate_report_config.json.j2', path: 'lambda/generate_report/utils/config.json.j2' }
    - { file: 'parse_report_config.json.j2', path: 'lambda/parse_report/config.json.j2' }

- name: load variables from config file
  include_vars:
    file: '/tmp/config.yaml'

- name: upload to remote
  template:
    src: '/tmp/{{ item.template }}'
    dest: '{{ play_path }}/{{ item.path }}'
    force: yes
  loop:
    - { template: 'test_website_config.json.j2', path: 'lambda/test_website/config.json' }
    - { template: 'generate_report_config.json.j2', path: 'lambda/generate_report/utils/config.json' }
    - { template: 'parse_report_config.json.j2', path: 'lambda/parse_report/config.json' }

- name: install pytest
  pip:
    name:
      - allure-pytest==2.9.45
      - pytest==6.2.5
      - pytest-rerunfailures==10.2
      - pytest-xdist==2.5.0
    virtualenv: /tmp/pytest/python
    virtualenv_command: /usr/bin/python3 -m venv
  become: yes

- name: install selenium
  pip:
    name:
      - selenium==3.14.0
    virtualenv: /tmp/selenium/python
    virtualenv_command: /usr/bin/python3 -m venv
  become: yes

- name: check for chromedriver
  changed_when: false
  stat:
    path: '/tmp/chromedriver_{{ chromedriver.version }}.zip'
  register: chromedriver_result

- name: download chromedriver from remote
  when: not chromedriver_result.stat.exists
  get_url:
    url: 'https://chromedriver.storage.googleapis.com/{{ chromedriver.version }}/chromedriver_linux64.zip'
    dest: '/tmp/chromedriver_{{ chromedriver.version }}.zip'
    checksum: 'sha1:{{ chromedriver.sha1sum }}'
    timeout: 180

- name: check for headless chromium
  changed_when: false
  stat:
    path: '/tmp/headless_chromium_{{ chrome.version }}.zip'
  register: headless_chromium_result

- name: download headless chromium from remote
  when: not headless_chromium_result.stat.exists
  get_url:
    url: 'https://github.com/adieuadieu/serverless-chrome/releases/download/v{{ chrome.headless.version }}/stable-headless-chromium-amazonlinux-{{ chrome.headless.tag }}.zip'
    dest: '/tmp/headless_chromium_{{ chrome.version }}.zip'
    checksum: 'sha1:{{ chrome.headless.sha1sum }}'
    timeout: 300

- name: create chromedriver directory
  file:
    path: /tmp/chromedriver
    state: directory
  become: yes

- name: extract files into directory
  unarchive:
    src: '{{ item }}'
    dest: /tmp/chromedriver
    remote_src: yes
  loop:
    - '/tmp/chromedriver_{{ chromedriver.version }}.zip'
    - '/tmp/headless_chromium_{{ chrome.version }}.zip'
  become: yes

- name: check for allure
  changed_when: false
  stat:
    path: '/tmp/allure-{{ allure.version }}.zip'
  register: allure_result

- name: download allure from remote
  when: not allure_result.stat.exists
  get_url:
    url: 'https://github.com/allure-framework/allure2/releases/download/{{ allure.version }}/allure-{{ allure.version }}.zip'
    dest: '/tmp/allure-{{ allure.version }}.zip'
    checksum: 'sha1:{{ allure.sha1sum }}'
    timeout: 300

- name: create allure directory
  file:
    path: /tmp/allure
    state: directory
  become: yes

- name: extract files into directory
  unarchive:
    src: '{{ item }}'
    dest: /tmp/allure
    remote_src: yes
  loop:
    - '/tmp/allure-{{ allure.version }}.zip'
  become: yes

- name: enable custom logo plugin in allure
  lineinfile:
    path: '/tmp/allure/allure-{{ allure.version }}/config/allure.yml'
    line: '  - custom-logo-plugin'
    insertafter: EOF
    state: present
  become: yes

- name: install psycopg2
  block:

    - name: check for postgresql
      changed_when: false
      stat:
        path: '/tmp/postgresql-11.12.tar.bz2'
      register: postgresql_result

    - name: download postgresql from remote
      when: not postgresql_result.stat.exists
      get_url:
        url: https://ftp.postgresql.org/pub/source/v11.12/postgresql-11.12.tar.bz2
        dest: '/tmp/postgresql-11.12.tar.bz2'
        checksum: sha1:4058af97fde72064c5fd18a508eda6a5526359df
        timeout: 300

    - name: check for psycopg2
      changed_when: false
      stat:
        path: '/tmp/psycopg2-2_9_3.tar.gz'
      register: psycopg2_result

    - name: download psycopg2 from remote
      when: not psycopg2_result.stat.exists
      get_url:
        url: https://github.com/psycopg/psycopg2/archive/refs/tags/2_9_3.tar.gz
        dest: '/tmp/psycopg2-2_9_3.tar.gz'
        checksum: sha1:9a9d9275a76e49d59c999e18dfaac1d61b671832
        timeout: 300

    - name: extract files into directory
      unarchive:
        src: '{{ item.file }}'
        dest: '{{ item.directory }}'
        remote_src: yes
      loop:
        - file: /tmp/postgresql-11.12.tar.bz2
          directory: /tmp
        - file: /tmp/psycopg2-2_9_3.tar.gz
          directory: /tmp

    - name: build postgresql
      shell: |
        ./configure --prefix "/tmp/pg" --without-readline --without-zlib &&
        make &&
        make install
      args:
        chdir: '/tmp/postgresql-11.12'
      become: yes

    - name: change psycopg2 config
      lineinfile:
        path: /tmp/psycopg2-2_9_3/setup.cfg
        regexp: '{{ item.regex }}'
        line: '{{ item.value }}'
        state: present
      loop:
        - regex: ^pg_config=.*$
          value: pg_config=/tmp/pg/bin/pg_config
        - regex: ^static_libpq=.*$
          value: static_libpq=1
      become: yes

    - name: build psycopg2
      shell: python3 setup.py build
      args:
        chdir: '/tmp/psycopg2-2_9_3'
      become: yes

    - name: create psycopg2 directory
      file:
        path: /tmp/psycopg2/python
        state: directory

    - name: generate psycopg2 directory content
      shell: |
        cp -pR build/lib.*/* /tmp/psycopg2/python &&
        strip /tmp/psycopg2/python/psycopg2/*.so
      args:
        chdir: '/tmp/psycopg2-2_9_3'

- name: install sqlalchemy
  pip:
    name:
      - SQLAlchemy==1.4.32
    virtualenv: /tmp/sqlalchemy/python
    virtualenv_command: /usr/bin/python3 -m venv
  become: yes